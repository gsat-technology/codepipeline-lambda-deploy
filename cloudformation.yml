Parameters:

  GithubOwner:
    Type: String
    Description: the owner of the github account (source)
  
  GithubRepoName:
    Type: String
    Description: name of the github repo

  GithubPersonalAccessToken:
    Type: String
    Description: instructions http://docs.aws.amazon.com/codepipeline/latest/userguide/pipelines-edit.html
  
  TestScript:
    Type: String
    Description: path to your test script in the nominated repo

Resources:

  WorkBucket:
    Type: "AWS::S3::Bucket"

  CodePipeline:
    Type: "AWS::CodePipeline::Pipeline"
    Properties:
      ArtifactStore:
        Location: !Ref WorkBucket
        Type: S3
      Name: !Ref AWS::StackName
      RoleArn: !GetAtt CodePipelineRole.Arn
      Stages:
        -
          Name: SourceGithub
          Actions:
            - 
              Name: source
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: 1
              Configuration:
                Owner: !Ref GithubOwner
                Repo: !Ref GithubRepoName 
                PollForSourceChanges: true
                Branch: master
                OAuthToken: !Ref GithubPersonalAccessToken
              RunOrder: 1
              OutputArtifacts:
                - Name: sourceOutput
        -
          Name: build
          Actions:
            - 
              Name: codebuild
              InputArtifacts:
                - Name: sourceOutput
              ActionTypeId:
                Category: Build
                Owner: AWS 
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Sub build-${AWS::StackName}
              RunOrder: 1
              OutputArtifacts:
                - Name: buildOutput
        -
          Name: Cloudformation
          Actions:
            - 
              Name: create_or_update_changeset
              InputArtifacts:
                - Name: buildOutput
              ActionTypeId:
                Category: Deploy
                Owner: AWS 
                Provider: CloudFormation
                Version: 1
              Configuration:
                ActionMode: CHANGE_SET_REPLACE
                ChangeSetName: !Sub ${AWS::StackName}-changeset
                RoleArn: !GetAtt CloudFormationDeployRole.Arn
                Capabilities: CAPABILITY_IAM
                StackName: !Sub ${AWS::StackName}-deploy
                TemplatePath: buildOutput::newCloudformation.yml
              RunOrder: 1
            - 
              Name: execute_changeset
              ActionTypeId:
                Category: Deploy
                Owner: AWS 
                Provider: CloudFormation
                Version: 1
              Configuration:
                ActionMode: CHANGE_SET_EXECUTE
                StackName: !Sub ${AWS::StackName}-deploy
                ChangeSetName: !Sub ${AWS::StackName}-changeset
              RunOrder: 2
        -
          Name: test
          Actions:
            - 
              Name: lambdaTest
              InputArtifacts:
                - Name: sourceOutput
              ActionTypeId:
                Category: Test
                Owner: AWS 
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Sub test-${AWS::StackName}
              RunOrder: 1
            

  CodeBuildBuild:
    Type: "AWS::CodeBuild::Project"
    Properties: 
      Artifacts:
        Type: CODEPIPELINE
      Cache: 
        Location: !Sub ${WorkBucket}/cache
        Type: S3
      Description: !Sub build stage for ${AWS::StackName}
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/java:openjdk-8
        EnvironmentVariables:
          -
            Name: WORK_BUCKET
            Value: !Ref WorkBucket
      Name: !Sub build-${AWS::StackName}
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Source:
        BuildSpec: | 
          version: 0.2
          phases:
            install:
              commands:
                - mvn package
                - aws cloudformation package 
                    --template-file cloudformation.yml 
                    --s3-bucket ${WORK_BUCKET}
                    --output-template-file newCloudformation.yml
          artifacts:
            files:
              - ./newCloudformation.yml
          cache:
            paths:
              - '/root/.m2/**/*'
        Type: CODEPIPELINE


  CodeBuildTest:
    Type: "AWS::CodeBuild::Project"
    Properties: 
      Artifacts:
        Type: CODEPIPELINE
      Description: !Sub test stage for ${AWS::StackName}
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/ubuntu-base:14.04
        EnvironmentVariables:
          -
            Name: TEST_SCRIPT
            Value: !Ref TestScript
          -
            Name: STACK_NAME
            Value: !Sub ${AWS::StackName}-deploy
      Name: !Sub test-${AWS::StackName}
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Source:
        BuildSpec: | 
          version: 0.2
          phases:
            install:
              commands:
                - apt-get update
                - apt-get install -y jq
                - lambda_name=$(aws cloudformation describe-stack-resources --stack-name ${STACK_NAME} | jq '.StackResources[] | select(.ResourceType == "AWS::Lambda::Function") | .PhysicalResourceId' -r)
                - chmod u+x ${TEST_SCRIPT}
                - ./${TEST_SCRIPT} $lambda_name
        Type: CODEPIPELINE
    

  CodePipelineRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "codepipeline.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "inline-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                Resource: "*"
              -
                Effect: "Allow"
                Action:
                  - s3:*
                Resource: 
                  - !Sub arn:aws:s3:::${WorkBucket}
                  - !Sub arn:aws:s3:::${WorkBucket}/*
              -
                Effect: "Allow"
                Action:
                  - cloudformation:DescribeStacks
                  - cloudformation:DescribeChangeSet
                  - cloudformation:CreateChangeSet
                  - cloudformation:DeleteChangeSet
                  - cloudformation:ExecuteChangeSet
                Resource:
                  - !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}-deploy/*
              -
                Effect: "Allow"
                Action:
                  - iam:PassRole   
                Resource:
                  - !GetAtt CloudFormationDeployRole.Arn
                                
                  
  CodeBuildRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "codebuild.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "inline-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: 
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*-${AWS::StackName}
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*-${AWS::StackName}:*
              -
                Effect: "Allow"
                Action:
                  - s3:*
                Resource: 
                  - !Sub arn:aws:s3:::${WorkBucket}
                  - !Sub arn:aws:s3:::${WorkBucket}/*
              -
                Effect: "Allow"
                Action:
                  - cloudformation:DescribeStackResources
                Resource: 
                  - "*"
              -
                Effect: "Allow"
                Action:
                  - lambda:InvokeFunction
                Resource: 
                  - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:*


  CloudFormationDeployRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "cloudformation.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "inline-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - lambda:*
                  - iam:*
                  - s3:*
                Resource: 
                  - "*"
              -
                Effect: "Allow"
                Action:
                  - cloudformation:CreateChangeSet
                Resource: 
                  - !Sub arn:aws:cloudformation:${AWS::Region}:aws:transform/Serverless-2016-10-31
                  
              